--- Lead Engineer Plan/Analysis ---
+Хорошо, давайте разберем запрос и составим план.

**Запрос:** Найти все неиспользуемые импорты в проекте.

**Анализ Контекста:**
*   Проект представляет собой веб-приложение на Next.js (с App Router), TypeScript, React.
*   Используется Firebase для бэкенда (Auth, Firestore, Storage) и Cloud Functions.
*   Стилизация выполняется с помощью Tailwind CSS (v4, судя по `postcss.config.mjs` и `design-system.md`), возможно, с использованием компонентов Shadcn UI (судя по `components.json` и структуре `components/ui`).
*   Для валидации схем используется Zod (`lib/*Schema.ts`).
*   В проекте настроен ESLint (`eslint.config.mjs`) и TypeScript (`tsconfig.json`).
*   Структура проекта включает `app`, `components`, `lib`, `context`, `firebase`, `functions`.

**План Действий (Высокоуровневый):**

Основная стратегия для обнаружения неиспользуемых импортов — это использование существующих инструментов статического анализа: ESLint и TypeScript Compiler.

1.  **Использование ESLint (Основной метод):**
    *   **Проверка конфигурации ESLint:** Открыть файл `eslint.config.mjs`. Убедиться, что правило `no-unused-vars` (или его TypeScript-эквивалент `@typescript-eslint/no-unused-vars`) включено и настроено корректно. Обычно оно включено по умолчанию в рекомендуемых конфигурациях (например, `next/core-web-vitals`), но стоит проверить. Это правило отвечает за обнаружение неиспользуемых переменных, включая импорты.
    *   **Запуск ESLint:** Выполнить команду линтера для всего проекта. Судя по `package.json` (файл не предоставлен, но стандартно), это может быть `npm run lint`, `yarn lint` или `pnpm lint`. Проанализировать вывод на наличие ошибок/предупреждений типа "is defined but never used", относящихся к импортированным сущностям.
    *   **Автоматическое исправление (Рекомендуется):** Запустить ESLint с флагом `--fix` (например, `npm run lint -- --fix`). ESLint автоматически удалит большинство простых неиспользуемых импортов.
    *   **Ручной обзор:** Просмотреть изменения, внесенные флагом `--fix`. В некоторых случаях (например, импорты только типов `import type {...}`) могут потребоваться дополнительные настройки правила или ручная проверка.

2.  **Использование TypeScript Compiler (Проверка/Альтернатива):**
    *   **Проверка `tsconfig.json`:** Убедиться, что в `compilerOptions` установлена опция `"noUnusedLocals": true`. Если ее нет, добавить. Эта опция заставляет компилятор сообщать об ошибках для неиспользуемых локальных переменных, включая импорты.
    *   **Запуск `tsc`:** Выполнить команду `tsc --noEmit` (или команду сборки проекта, например, `npm run build`). Компилятор проверит весь проект на ошибки типов и неиспользуемые локальные переменные (согласно `tsconfig.json`) без генерации JS-файлов. Это поможет выявить неиспользуемые импорты, но не исправит их автоматически.

3.  **Специализированные инструменты (При необходимости):**
    *   Если ESLint и `tsc` по какой-то причине окажутся недостаточными, можно рассмотреть инструменты вроде `ts-prune`, которые специально созданы для поиска неиспользуемого экспортируемого кода и могут косвенно помочь с импортами. Однако, для задачи поиска *неиспользуемых импортов внутри файлов*, ESLint и `tsc` обычно являются наиболее подходящими и уже интегрированными решениями.

**Потенциальные Проблемы и Рекомендации:**
*   **Область проверки:** Убедитесь, что конфигурация ESLint и `tsconfig.json` охватывают все необходимые директории (`app`, `components`, `lib`, `context`, `functions/src`).
*   **Импорты типов:** Правило `@typescript-eslint/no-unused-vars` обычно корректно обрабатывает `import type`, но стоит убедиться, что оно настроено правильно.
*   **CI/CD:** Рекомендуется интегрировать проверку линтером (шаг 1.2) в ваш CI/CD пайплайн, чтобы предотвратить попадание неиспользуемых импортов в кодовую базу в будущем.

**Итог:** Наиболее эффективный и интегрированный способ — использовать ESLint с правилом `no-unused-vars` (и его TypeScript-аналогом), включая возможность автоматического исправления (`--fix`). Проверка через `tsc` с опцией `noUnusedLocals` служит хорошим дополнением или альтернативным методом верификации.

+-----------------------------------
+
+
--- Final Response (Coder) ---
+```diff
--- a/tsconfig.json
+++ b/tsconfig.json
@@ -7,6 +7,7 @@
     "skipLibCheck": true,
     "strict": true,
     "noEmit": true,
+    "noUnusedLocals": true, // Add this line to report unused local variables, including imports
     "esModuleInterop": true,
     "module": "esnext",
     "moduleResolution": "bundler",

```

+